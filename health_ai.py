# -*- coding: utf-8 -*-
"""Health AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p-IfJghnRiSFEu17bIfY-YD2zZIjN5Yo
"""

with gr.Blocks() as app:import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)

# Set padding token if missing
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Load model with appropriate precision and device mapping
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# Core generation function
def generate_response(prompt, max_new_tokens=700):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_new_tokens=max_new_tokens,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.pad_token_id,
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    # Remove the prompt from the generated text
    if response.startswith(prompt):
        response = response[len(prompt):]
    return response.strip()

# Function for disease prediction
def disease_prediction(symptoms):
    prompt = (
        "Based on the following symptoms, provide possible medical conditions and general medication suggestions. "
        "Always emphasize the importance of consulting a doctor for proper diagnosis.\n\n"
        f"Symptoms: {symptoms}\n\n"
        "Possible conditions and recommendations:\n\n"
        "**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**\n\n"
        "Analysis:"
    )
    return generate_response(prompt)

# Function for treatment plan generation
def treatment_plan(condition, age, gender, medical_history):
    prompt = (
        "Generate personalized treatment suggestions for the following patient information. "
        "Include home remedies and general medication guidelines.\n\n"
        f"Medical Condition: {condition}\n"
        f"Age: {age}\n"
        f"Gender: {gender}\n"
        f"Medical History: {medical_history}\n\n"
        "Personalized treatment plan including home remedies and medication guidelines:\n\n"
        "**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**\n\n"
        "Treatment Plan:"
    )
    return generate_response(prompt)

# Gradio Interface
    gr.Markdown("# ðŸ©º Medical AI Assistant")
    gr.Markdown("**Disclaimer: This tool is for informational purposes only. Do not input personal identifiers. Always consult a medical professional.**")

    with gr.Tabs():
        # Tab 1: Disease Prediction
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")
                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(fn=disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        # Tab 2: Treatment Plan
        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")
                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(fn=treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

# Launch app
app.launch(share=True)